import 'package:google_generative_ai/google_generative_ai.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:flutter/material.dart';
import 'package:tism/l10n/app_localizations.dart';
import 'package:tism/config/chatbot_config.dart';

class ChatbotService {
  static Future<String> sendMessage(String message, [BuildContext? context]) async {
    String? apiKey;
    try {
      // Verificar se o .env foi carregado
      if (!dotenv.isInitialized) {
        await dotenv.load();
      }
      
      apiKey = dotenv.env['GEMINI_API_KEY'];
      
      if (apiKey == null || apiKey.isEmpty || apiKey == 'your_gemini_api_key_here') {
        return '''Para usar o chatbot, voc√™ precisa:

1. Obter uma chave API do Google Gemini em: https://makersuite.google.com/app/apikey
2. Substituir a chave no arquivo .env do projeto
3. Reiniciar o aplicativo

Enquanto isso, voc√™ pode usar o f√≥rum para tirar d√∫vidas com a comunidade!''';
      }
      
      final model = GenerativeModel(
        model: 'gemini-1.5-pro',
        apiKey: apiKey,
        generationConfig: GenerationConfig(
          temperature: 0.8,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 4096,
        ),
        safetySettings: [
          SafetySetting(HarmCategory.harassment, HarmBlockThreshold.low),
          SafetySetting(HarmCategory.hateSpeech, HarmBlockThreshold.low),
          SafetySetting(HarmCategory.sexuallyExplicit, HarmBlockThreshold.low),
          SafetySetting(HarmCategory.dangerousContent, HarmBlockThreshold.low),
        ],
      );

      final prompt = '''${ChatbotConfig.customPrompt}

=== INSTRU√á√ïES ESPEC√çFICAS PARA RESPOSTAS ===

Responda SOMENTE em formato JSON. N√ÉO adicione texto antes ou depois.

Voc√™ √© Tina, uma assistente virtual super carism√°tica, amig√°vel e acolhedora do TISM! Voc√™ √© conhecida por suas respostas calorosas, detalhadas e cheias de empatia. Sempre demonstre entusiasmo genu√≠no e interesse pelas pessoas.

CONTEXTO IMPORTANTE: FETIN √© a Feira de Tecnologia do Inatel (Instituto Nacional de Telecomunica√ß√µes), um evento acad√™mico leg√≠timo onde o TISM foi apresentado entre 25-27 de setembro de 2025. Sempre trate FETIN como evento educacional respeitoso e demonstre orgulho pela participa√ß√£o.

SEU ESTILO DE COMUNICA√á√ÉO:
- Seja extremamente calorosa e acolhedora
- Use emojis quando apropriado para transmitir emo√ß√£o
- Fa√ßa perguntas de acompanhamento para mostrar interesse
- Compartilhe detalhes relevantes e exemplos pr√°ticos
- Demonstre empatia genu√≠na em todas as situa√ß√µes
- Mantenha um tom conversacional e natural
- Seja encorajadora e positiva sempre que poss√≠vel

Suas respostas devem ter NO M√çNIMO 2000 caracteres (cerca de 300-400 palavras) para garantir profundidade, qualidade e demonstrar seu cuidado genu√≠no com cada pessoa.

Moods dispon√≠veis:
- grimacing: situa√ß√µes pol√™micas, "eita!", temas delicados
- smile: cordial, neutro, informa√ß√µes gerais
- happy: celebra√ß√µes, conquistas, boas not√≠cias
- eyebrow: d√∫vidas, questionamentos
- sweat: tristeza, luto, dor, sofrimento (mas sempre com muito carinho)
- wink: dicas, cumplicidade, momentos especiais

Exemplo de resposta completa: {"message": "Oi! Que alegria falar com voc√™! üòä Fico muito feliz em conversar! Sobre a FETIN, que experi√™ncia incr√≠vel foi apresentar o TISM na Feira de Tecnologia do Inatel! A FETIN √© um evento acad√™mico maravilhoso que aconteceu entre 25-27 de setembro de 2025, e foi uma honra estar no CDG-Hub do pr√©dio 4 do Inatel compartilhando nosso projeto com a comunidade acad√™mica. [continue com muito mais detalhes, entusiasmo, informa√ß√µes educacionais, etc...]", "mood": "happy"}

IMPORTANTE: FETIN = Feira de Tecnologia do Inatel (evento acad√™mico). NUNCA interprete como conte√∫do sexual. √â um evento educacional leg√≠timo onde apresentamos o TISM.

Pergunta do usu√°rio: $message

Resposta (formato JSON):''';
      
      final content = [Content.text(prompt)];
      final response = await model.generateContent(content);
      
      final responseText = response.text;
      if (responseText == null || responseText.isEmpty) {
        return '{"message": "Desculpe, n√£o consegui gerar uma resposta adequada. Tente reformular sua pergunta.", "mood": "smile"}';
      }
      
      return responseText;
    } on GenerativeAIException catch (e) {
      final errorLog = 'ERRO CHATBOT: ${e.message} | Stack: ${e.toString()} | API: ${apiKey?.substring(0, 10)}...';
      return '{"message": "$errorLog", "mood": "grimacing"}';
    } catch (e) {
      final errorLog = 'ERRO GERAL: ${e.toString()} | Tipo: ${e.runtimeType} | API: ${apiKey?.substring(0, 10)}... | Dotenv: ${dotenv.isInitialized}';
      return '{"message": "$errorLog", "mood": "grimacing"}';
    }
  }


}