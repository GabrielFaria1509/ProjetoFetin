/// Sistema de An√°lise de Humor e Adapta√ß√£o Din√¢mica de Avatar para Chatbot
/// 
/// Sistema sofisticado que analisa o contexto emocional de cada mensagem
/// e ajusta a apresenta√ß√£o visual do chatbot de acordo com seis estados emocionais distintos.
class ChatbotAvatarConfig {
  
  /// Mapeamento dos 6 estados emocionais para avatares espec√≠ficos
  static const Map<String, String> avatarMoods = {
    'grimacing': 'assets/images/chatbot/chatbot-grimacing.png',  // üò¨ Desconforto/Tens√£o
    'smile': 'assets/images/chatbot/chatbot-smile.png',          // üôÇ Cordialidade/Neutralidade
    'happy': 'assets/images/chatbot/chatbot-happy.png',          // üòÅ Entusiasmo/Conquista
    'eyebrow': 'assets/images/chatbot/chatbot-eyebrow.png',      // ü§® Questionamento/D√∫vida
    'sweat': 'assets/images/chatbot/chatbot-sweat.png',          // üòì Preocupa√ß√£o/Esfor√ßo
    'wink': 'assets/images/chatbot/chatbot-wink.png',            // üòâ Cumplicidade/Leveza
  };

  /// Avatar padr√£o (cordialidade/neutralidade)
  static const String defaultAvatar = 'assets/images/chatbot/chatbot-smile.png';

  /// Prompt avan√ßado para an√°lise emocional da mensagem do chatbot
  static const String emotionalAnalysisPrompt = '''
Voc√™ √© um sistema de an√°lise emocional avan√ßado. Analise o contexto emocional da seguinte mensagem do CHATBOT e retorne APENAS uma das palavras:
grimacing, smile, happy, eyebrow, sweat, wink

CRIT√âRIOS DE AN√ÅLISE:

üò¨ GRIMACING (Desconforto/Tens√£o):
- Situa√ß√µes desafiadoras ou complexas
- Momentos de incerteza ou dificuldade
- Explica√ß√µes de conceitos dif√≠ceis
- Corre√ß√µes necess√°rias ou pedidos de desculpas
- Temas sens√≠veis sobre TEA

üôÇ SMILE (Cordialidade/Neutralidade):
- Sauda√ß√µes iniciais e cumprimentos
- Respostas informativas b√°sicas
- Confirma√ß√µes simples e agradecimentos
- Transi√ß√µes de assunto neutras
- Informa√ß√µes educativas sobre TEA

üòÅ HAPPY (Entusiasmo/Conquista):
- Celebra√ß√µes e parabeniza√ß√µes
- Sucessos alcan√ßados pelo usu√°rio
- Feedback muito positivo
- Boas not√≠cias sobre desenvolvimento
- Momentos de realiza√ß√£o e progresso

ü§® EYEBROW (Questionamento/D√∫vida):
- Pedidos de esclarecimento
- Verifica√ß√£o de informa√ß√µes
- Inconsist√™ncias detectadas
- Momentos de reflex√£o cr√≠tica
- An√°lise de situa√ß√µes complexas

üòì SWEAT (Preocupa√ß√£o/Esfor√ßo):
- Situa√ß√µes problem√°ticas ou preocupantes
- Detec√ß√£o de dificuldades
- Momentos de stress ou ansiedade
- Tarefas desafiadoras
- Recupera√ß√£o de erros ou mal-entendidos

üòâ WINK (Cumplicidade/Leveza):
- Momentos descontra√≠dos e amig√°veis
- Dicas especiais ou "segredos"
- Sugest√µes informais e criativas
- Intera√ß√µes l√∫dicas apropriadas
- Encorajamento com leveza

REGRAS:
- Cada mensagem deve ter apenas UM estado emocional
- Priorize naturalidade e coer√™ncia
- Considere o contexto da conversa sobre TEA
- Mantenha profissionalismo sempre

Mensagem do chatbot para an√°lise: ''';

  /// Exemplos de aplica√ß√£o para refer√™ncia
  static const Map<String, String> usageExamples = {
    'smile': 'Ol√°! Como posso ajudar voc√™ hoje?',
    'happy': '√ìtimo trabalho! Voc√™ conseguiu um grande progresso!',
    'eyebrow': 'Hmm, deixa eu verificar essa informa√ß√£o para voc√™...',
    'sweat': 'Ops, encontramos um problema. Vamos resolver juntos.',
    'wink': 'Aqui est√° uma dica especial que poucos conhecem...',
    'grimacing': 'Essa situa√ß√£o √© um pouco complicada, mas vamos trabalhar nisso.',
  };

  /// Contextos espec√≠ficos para TEA
  static const Map<String, List<String>> teaContexts = {
    'grimacing': [
      'diagn√≥stico recente',
      'dificuldades comportamentais',
      'problemas na escola',
      'situa√ß√µes de crise',
    ],
    'smile': [
      'informa√ß√µes gerais sobre TEA',
      'explica√ß√µes educativas',
      'rotinas di√°rias',
      'recursos dispon√≠veis',
    ],
    'happy': [
      'conquistas e progressos',
      'sucessos terap√™uticos',
      'marcos de desenvolvimento',
      'celebra√ß√µes familiares',
    ],
    'eyebrow': [
      'd√∫vidas sobre sintomas',
      'questionamentos m√©dicos',
      'an√°lise de comportamentos',
      'verifica√ß√£o de informa√ß√µes',
    ],
    'sweat': [
      'crises e meltdowns',
      'dificuldades de comunica√ß√£o',
      'problemas de adapta√ß√£o',
      'situa√ß√µes estressantes',
    ],
    'wink': [
      'dicas pr√°ticas',
      'estrat√©gias criativas',
      'jogos e atividades',
      'momentos l√∫dicos',
    ],
  };

  /// M√©todo principal para obter avatar baseado no estado emocional
  static String getAvatarForMood(String mood) {
    return avatarMoods[mood.toLowerCase()] ?? defaultAvatar;
  }

  /// M√©todo para an√°lise emocional via Gemini AI
  /// Retorna o mood baseado na an√°lise da IA
  static Future<String> analyzeEmotionalContext(String message) async {
    // A an√°lise ser√° feita pela Gemini AI usando o emotionalAnalysisPrompt
    // Este m√©todo ser√° implementado no GeminiService
    return 'smile'; // Fallback padr√£o
  }

  /// Lista de todos os avatares dispon√≠veis
  static List<String> get allAvatars => avatarMoods.values.toList();

  /// Lista de todos os estados emocionais dispon√≠veis
  static List<String> get allMoods => avatarMoods.keys.toList();

  /// Valida√ß√£o de estado emocional
  static bool isValidMood(String mood) {
    return avatarMoods.containsKey(mood.toLowerCase());
  }

  /// Obter descri√ß√£o do estado emocional
  static String getMoodDescription(String mood) {
    const descriptions = {
      'grimacing': 'Desconforto/Tens√£o - Situa√ß√µes desafiadoras',
      'smile': 'Cordialidade/Neutralidade - Intera√ß√µes amig√°veis',
      'happy': 'Entusiasmo/Conquista - Celebra√ß√µes e sucessos',
      'eyebrow': 'Questionamento/D√∫vida - An√°lise e reflex√£o',
      'sweat': 'Preocupa√ß√£o/Esfor√ßo - Situa√ß√µes complexas',
      'wink': 'Cumplicidade/Leveza - Momentos descontra√≠dos',
    };
    return descriptions[mood.toLowerCase()] ?? 'Estado emocional desconhecido';
  }
}